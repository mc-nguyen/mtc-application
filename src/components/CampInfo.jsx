import React, { useState, forwardRef, useImperativeHandle } from 'react';
import SignaturePad from './SignaturePad';
import { useLanguage } from '../LanguageContext';
import { useCampSettings } from '../hooks/useAdminSettings';
import './FormSection.css';

const CampInfo = forwardRef(({ formData, setFormData }, ref) => {
    const { t } = useLanguage();
    const { campInfo, loading } = useCampSettings();
    const [showErrors, setShowErrors] = useState(false);
    const [participantName, setParticipantName] = useState('');
    const isAdult = formData.isAdult;

    // 1. DI CHUY·ªÇN HOOK useImperativeHandle L√äN TR√äN C√ôNG
    // Hook n√†y ph·∫£i lu√¥n ƒë∆∞·ª£c g·ªçi.
    useImperativeHandle(ref, () => ({
        validate: () => {
            // Logic ki·ªÉm tra c·∫ßn thi·∫øt cho b∆∞·ªõc n√†y (t√™n ng∆∞·ªùi k√Ω, ch·ªØ k√Ω)
            const isSigned = !!formData.campInfo?.signature;
            const isSignerNamePresent = !!formData.campInfo?.signerName && formData.campInfo.signerName.trim() !== '';

            const isValid = isSigned && isSignerNamePresent;

            if (!isValid) {
                setShowErrors(true);
            } else {
                setShowErrors(false);
            }
            return isValid;
        }
    }));


    // 2. GI·ªÆ NGUY√äN ƒêI·ªÄU KI·ªÜN EARLY RETURN
    if (loading) {
        return <section className="form-section loading-section">ƒêang t·∫£i th√¥ng tin tr·∫°i...</section>;
    }

    // 3. C√ÅC H√ÄM X·ª¨ L√ù V√Ä LOGIC KH√ÅC V·∫™N GI·ªÆ NGUY√äN
    const primaryContact = campInfo.contacts[0] || {};
    const secondaryContact = campInfo.contacts[1] || {};

    const handleCampInfoChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            campInfo: {
                ...prev.campInfo,
                [name]: value,
            },
        }));
    };

    const handleSignatureChange = (dataUrl) => {
        setFormData(prev => ({
            ...prev,
            campInfo: {
                ...prev.campInfo,
                signature: dataUrl,
            },
        }));
    };

    const handleSignatureChangeName = (name) => {
        setFormData(prev => ({
            ...prev,
            campInfo: {
                ...prev.campInfo,
                signerName: name,
            },
        }));
    };

    const currentSignerName = formData.campInfo?.signerName || '';

    return (
        <section className="form-section camp-info">
            <h2 className="form-section__title">
                {t('camp_announcement_title')} "{campInfo.name || 'Tr·∫°i'}"
            </h2>
            <p style={{ marginBottom: '1.5rem', color: '#6c757d' }}>
                K√≠nh th∆∞a Cha Tr√≠, th·∫ßy Nam, qu√Ω tr·ª£ t√°, v√† qu√Ω ph·ª• huynh,
            </p>
            <p style={{ marginBottom: '1.5rem', color: '#6c757d' }}>
                ƒêo√†n Thi·∫øu Nhi Th√°nh Th·ªÉ M·∫π Thi√™n Ch√∫a, Riverside r·∫•t h√¢n h·∫°nh th√¥ng b√°o v·ªÅ Sa M·∫°c ƒêo√†n th∆∞·ªùng ni√™n s·∫Øp
                t·ªõi c·ªßa ƒëo√†n. NƒÉm nay, Sa M·∫°c ƒêo√†n s·∫Ω di·ªÖn ra t·∫°i trung t√¢m tƒ©nh t√¢m n·∫±m tr√™n n√∫i v·ªõi kh√¥ng kh√≠ trong l√†nh v√†
                y√™n tƒ©nh. ƒê√¢y s·∫Ω l√† m·ªôt c∆° h·ªôi tuy·ªát v·ªùi cho t·∫•t c·∫£ m·ªçi ng∆∞·ªùi, ƒë·∫∑c bi·ªát l√† c√°c em Thi·∫øu Nhi, ƒë·ªÉ k·∫øt n·ªëi v·ªõi Ch√∫a
                Gi√™su, v·ªõi gia ƒë√¨nh, v√† v·ªõi b·∫°n b√®. Sa M·∫°c ƒêo√†n s·∫Ω ƒë∆∞·ª£c t·ªï ch·ª©c t·∫°i ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian d∆∞·ªõi ƒë√¢y:
            </p>

            <h3 className="form-section__subtitle">üìÖ {t('event_details_title')} "{campInfo.name || 'Tr·∫°i'}"</h3>
            <div className="form-section__grid">
                <div className="form-section__field">
                    <label className="form-section__label">üìç {t('event_location_label')}</label>
                    <p className="form-section__input" style={{ backgroundColor: '#e9ecef', fontWeight: 'bold' }}>{campInfo.location}</p>
                </div>
                <div className="form-section__field">
                    <label className="form-section__label">‚è∞ {t('event_time_label')}</label>
                    <p className="form-section__input" style={{ backgroundColor: '#e9ecef', fontWeight: 'bold' }}>{campInfo.time}</p>
                </div>
            </div>

            {/* ·∫®N PH·∫¶N GI√Å C·∫¢ */}
            <div className="form-section__field" style={{ marginBottom: '1.5rem' }}>
                <label className="form-section__label">üí∞ {t('camp_fees_title')}</label>
                <p className="form-section__input required-message" style={{ fontWeight: 'bold', color: 'var(--primary-color)' }}>
                    {t('fee_to_be_announced')}
                </p>
            </div>

            {/* --- Th√¥ng Tin S·ª± Ki·ªán (L·∫•y t·ª´ Settings) --- */}
            <p style={{ marginBottom: '1.5rem', color: '#6c757d' }}>
                Ch√∫ng con k√≠nh m·ªùi qu√Ω Cha, qu√Ω th·∫ßy, qu√Ω Tr·ª£ T√°, qu√Ω ph·ª• huynh, v√† c√°c em c√πng ghi danh tham gia Sa M·∫°c
                ƒêo√†n b·ªï √≠ch n√†y. H·∫°n ch√≥t ghi danh l√† <strong>{campInfo.deadline}</strong>. Nguy·ªán xin Ch√∫a Gi√™su Th√°nh Th·ªÉ v√† M·∫π Maria
                ban mu√¥n ∆°n l√†nh tr√™n gia ƒë√¨nh qu√Ω v·ªã.
            </p>
            <p style={{ marginBottom: '1.5rem', color: '#6c757d' }}>
                M·ªçi th·∫Øc m·∫Øc xin li√™n l·∫°c qua s·ªë ƒëi·ªán tho·∫°i:
            </p>

            <ul style={{ marginBottom: '1.5rem', color: '#6c757d' }}>
                <li>{primaryContact.name}: {primaryContact.phone}</li>
                {secondaryContact.name && <li>{secondaryContact.name}: {secondaryContact.phone}</li>}
            </ul>

            <hr className="divider" />

            <div className="form-section__field">
                <label className="form-section__label">
                    {isAdult ? t('participant_signature_name_label') : t('parent_signature_name_label')}*
                </label>
                <input
                    type="text"
                    name="signerName"
                    value={currentSignerName}
                    onChange={handleCampInfoChange}
                    placeholder={t('enter_full_name_for_signature')}
                    className="form-section__input"
                    required
                />
                {showErrors && (!currentSignerName || currentSignerName.trim() === '') && (
                    <p className="required-message">{t('name_required_text')}</p>
                )}
            </div>

            <br />

            {!isAdult && <div className="form-section__field">
                <label className="form-section__label">
                    {t('participant_name_label')}*
                </label>
                <input
                    type="text"
                    name="participantName"
                    value={participantName}
                    onChange={(e) => setParticipantName(e.target.value)}
                    placeholder={t('enter_participant_full_name')}
                    className="form-section__input"
                    required
                />
                {showErrors && (!currentSignerName || currentSignerName.trim() === '') && (
                    <p className="required-message">{t('name_required_text')}</p>
                )}
            </div>
            }

            <hr className="divider" />

            {/* --- Ch·ªØ K√Ω (S·ª≠ d·ª•ng SignaturePad) --- */}
            <div className="signature-section">
                <SignaturePad
                    content={isAdult ? t('adult_commitment_text') : t('minor_commitment_text')}
                    // Truy·ªÅn t√™n ƒë√£ nh·∫≠p th·ªß c√¥ng v√†o SignaturePad
                    signerName={currentSignerName}
                    onSign={handleSignatureChange}
                    changeName={handleSignatureChangeName}
                    existingSignature={formData.campInfo?.signature}
                />
                {showErrors && !formData.campInfo?.signature && (
                    <p className="required-message">{t('signature_required_text')}*</p>
                )}
            </div>
        </section>
    );
});

export default CampInfo;